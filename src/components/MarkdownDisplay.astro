---
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import { formatDate } from "@js/utils";
import type { CollectionEntry } from "astro:content";
import Card from "./Card";
import FichePermaLink from "./fiches/FichePermaLink.astro";
import FicheVersionDisplay from "./fiches/FicheVersionDisplay.astro";
import FichesMetasDisplay from "./fiches/FichesMetasDisplay.astro";
import FichesTableValidation from "./fiches/FichesTableValidation.astro";

const REF_NAME = process.env.PUBLIC_REF_NAME;

type Props = {
  type: "fiches" | "lexique" | "personas";
  entry: CollectionEntry<"fiches" | "lexique" | "personas">;
  headings: Array<{ depth: number; text: string; slug: string }>;
};

const { type = "persona", entry, headings } = Astro.props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<article class="lg:grid lg:grid-cols-[1fr_5fr] lg:gap-4">
  {
    type === Card.FICHES && (
      <>
        <i class="flex items-center">
          {t("Mise Ã  jour le")}{" "}
          {formatDate(entry.data.updatedAt || entry.data.updatedAt)}
        </i>
        <span class="hidden" data-pagefind-filter="type">
          {t("Bonnes pratiques")}
        </span>
        <FichePermaLink entry={entry} />
        <h1 class="flex flex-col items-start gap-2 lg:col-span-2 lg:flex-row lg:items-center lg:gap-0">
          <span class="badge mr-2 whitespace-nowrap border-primary bg-primary">
            {REF_NAME} {entry.data["refID"]}
          </span>
          <span>{entry.data.title}</span>
        </h1>
      </>
    )
  }
  {
    (type === Card.LEXIQUE || type === Card.PERSONAS) && (
      <h1 class="lg:col-span-2">{entry.data.title}</h1>
    )
  }
  {
    type === Card.LEXIQUE && (
      <span class="hidden" data-pagefind-filter="type">
        {t("Lexique")}
      </span>
    )
  }
  {
    type === Card.PERSONAS && (
      <span class="hidden" data-pagefind-filter="type">
        {t("Personas")}
      </span>
    )
  }
  {
    type === Card.FICHES && (
      <>
        <aside>
          <FichesMetasDisplay
            frontmatter={entry.data}
            className=""
            tableOfContents={headings}
          />
        </aside>
      </>
    )
  }
  <div
    class:list={[
      "markdown-content",
      {
        "lg:col-span-2": type === Card.LEXIQUE || type === Card.PERSONAS,
      },
    ]}
  >
    {
      type === Card.FICHES && (
        <FicheVersionDisplay versions={entry.data["versions"]} />
      )
    }
    {/* CONTENT */}
    <slot />
    {
      type === Card.FICHES && (
        <FichesTableValidation validations={entry.data["validations"]} />
      )
    }
  </div>
</article>
