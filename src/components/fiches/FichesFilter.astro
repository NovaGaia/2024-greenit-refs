---
import { getCollectionByLang } from "@contentConfig";
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import { slugify } from "@js/utils";
import { Icon } from "astro-icon/components";
import type { CollectionEntry } from "astro:content";

const datas: any[] = [];
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
let entries: CollectionEntry<"fiches">[] = [];

const getDatas = async () => {
  entries = await getCollectionByLang("fiches", lang);

  entries.forEach((entry) => {
    Object.keys(entry.data).forEach((key) => {
      if (key === "lifecycle" || key === "scope" || key === "saved_resources") {
        if (!datas.find((data) => data.name === key)) {
          datas.push({
            name: key,
            values: [],
          });
        }
        if (
          !datas
            .find((data) => data.name === key)
            .values.includes(entry.data[key])
        ) {
          if (Array.isArray(entry.data[key])) {
            datas
              .find((data) => data.name === key)
              // @ts-ignore
              .values.push(...entry.data[key]);
          } else {
            datas
              .find((data) => data.name === key)
              .values.push(entry.data[key]);
          }
        }
      }
    });
    // netoyage des valeurs en double
    datas.forEach((data) => {
      data.values = [...new Set(data.values)];
    });
    // trie des valeurs par ordre alphabétique
    datas.forEach((data) => {
      data.values.sort((a, b) => {
        if (a < b) {
          return -1;
        }
        if (b < a) {
          return 1;
        }
        return 0;
      });
    });
  });
};

await getDatas();

const styleDatas = [
  {
    name: "lifecycle",
    values: [
      "1-analyse-of-needs",
      "2-installation",
      "3-conception-design",
      "4-integration-development",
      "5-content-media",
      "6-tests-validation",
      "7-online",
      "8-maintenance",
      "9-end-of-life",
    ],
  },
  {
    name: "scope",
    values: [
      "cache",
      "documents",
      "features",
      "images",
      "front-office",
      "hosting",
      "performance",
      "security",
      "seo",
      "storage",
      "themes",
      "videos-sounds",
    ],
  },
  {
    name: "saved_resources",
    values: [
      "cpu",
      "ram",
      "storage",
      "network",
      "Requêtes",
      "requests",
      "e-waste",
      "electricity",
      "ghg",
    ],
  },
];
const styles = styleDatas.map((item) => {
  return item.values.map((child) => {
    return `.group:has(#cb_${slugify(item.name)}_${slugify(child)}:checked)
                    .tohide:not(:has([data-${slugify(item.name)}*="${slugify(child)}"])) {
                    animation: slideaway 200ms;
                    display: none;
                }`;
  });
});
---

<section class="group flex flex-col gap-4">
  <div class="grid-cols-1 sm:col-span-3">
    <label
      for="filter-state"
      role="button"
      class="btn btn-outline inline-flex items-center gap-2 p-3"
    >
      <span>
        <span class="inline group-has-[#filter-state:checked]:hidden"
          >{t("Afficher")}</span
        ><span class="hidden group-has-[#filter-state:checked]:inline"
          >{t("Masquer")}</span
        >
        {t("les filtres")}
      </span>
      <input id="filter-state" type="checkbox" class="hidden" />
      <Icon
        name="tabler:circle-chevron-right"
        class="inline group-has-[#filter-state:checked]:hidden"
        width={24}
        height={24}
      />
      <Icon
        name="tabler:circle-chevron-down"
        class="hidden group-has-[#filter-state:checked]:inline"
        width={24}
        height={24}
      />
    </label>
  </div>
  <div
    class="hidden grid-cols-1 gap-3 rounded border border-primary p-4 group-has-[#filter-state:checked]:grid sm:grid-cols-3"
  >
    <div class="col-span-3 hidden">
      <h2 class="font-black">{t("Catégories")}</h2>
    </div>
    {
      datas.map((item) => {
        return (
          <div>
            <p class="mb-2 font-black">{t(item.name)}</p>
            <ul class="flex flex-col gap-1">
              {item.values.map((child) => {
                return (
                  <li>
                    <input
                      id={`cb_${slugify(item.name)}_${slugify(child)}`}
                      type="checkbox"
                      value={slugify(child)}
                    />
                    <label for={`cb_${slugify(item.name)}_${slugify(child)}`}>
                      {t(child)}
                    </label>
                  </li>
                );
              })}
            </ul>
          </div>
        );
      })
    }
  </div>
  <style id="filter_styles" is:inline></style>
</section>
<script define:vars={{ styles: styles }}>
  document.getElementById("filter_styles").innerHTML = styles
    .join("\n")
    .replaceAll(",", "\n");
</script>
