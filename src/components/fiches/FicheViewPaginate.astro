---
import { getLangFromUrl, useTranslations } from "@i18n/utils";
import { getCollection, type CollectionEntry } from "astro:content";

type Props = {
  current: CollectionEntry<"fiches">;
  className?: string;
};

type PrevNext = {
  prev: CollectionEntry<"fiches"> | null;
  next: CollectionEntry<"fiches"> | null;
};

const PUBLIC_REF_NAME =
  import.meta.env.PUBLIC_REF_NAME || process.env.PUBLIC_REF_NAME;

function generatePrevNext(entries, current, lang): PrevNext {
  const filteredEntries = entries
    .filter((entry) => entry.data.refType === PUBLIC_REF_NAME)
    .filter((entry) => entry.slug.split("/")[0] === lang)
    .filter((entry) =>
      import.meta.env.MODE === "development" ? "true" : entry.data.published,
    );

  let returned = { prev: null, next: null };
  filteredEntries.map((entry, idx) => {
    const prev = filteredEntries[idx - 1];
    const next = filteredEntries[idx + 1];
    if (current.slug === entry.slug) {
      returned = { prev, next };
      return { prev, next };
    }
  });

  return {
    prev: returned?.prev,
    next: returned?.next,
  };
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const entries = await getCollection("fiches");
const { current, className } = Astro.props;
const { prev, next } = generatePrevNext(entries, current, lang);
---

<nav
  class:list={["blog-post-nav border-t-2 pt-4", className]}
  aria-label={t("Navigation entre les bonnes pratiques")}
>
  <ul
    class:list={[
      "noliststyle grid",
      {
        "grid-cols-3": prev && next,
        "grid-cols-2": !prev || !next,
      },
    ]}
  >
    {
      prev && (
        <li class="text-center md:text-left">
          <a
            href={`${prev.slug.split("/")[1]}.html`}
            rel="prev"
            class="no-underline"
          >
            ← <span class="hidden md:block">{prev.data.title}</span>
          </a>
        </li>
      )
    }
    <li
      class:list={[
        "",
        {
          "text-right": !prev,
          "text-left": !next,
          "text-center": next && prev,
        },
      ]}
    >
      {
        /* <Link to="/" rel="home">
            Accueil
          </Link> */
      }
    </li>
    {
      next && (
        <li class="text-center md:text-right">
          <a
            href={`${next.slug.split("/")[1]}.html`}
            rel="next"
            class="no-underline"
          >
            → <span class="hidden md:block">{next.data.title}</span>
          </a>
        </li>
      )
    }
  </ul>
</nav>
